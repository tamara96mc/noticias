{"version":3,"sources":["components/Header.js","hooks/useSelect.js","components/Formulario.js","components/Noticia.js","components/ListadoNoticias.js","App.js","serviceWorker.js","index.js","components/Formulario.module.css"],"names":["Header","titulo","className","href","useSelect","stateInicial","opciones","useState","state","actualizarState","value","onChange","e","target","map","opcion","key","label","Formulario","guardarCategoria","categoria","SelectNoticias","styles","buscador","onSubmit","preventDefault","heading","type","Noticia","noticia","urlToImage","url","title","description","source","imagen","src","alt","name","rel","ListadoNoticias","noticias","App","guardarNoticias","useEffect","a","async","fetch","respuesta","json","articles","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.db1744b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav className=\"nav-wrapper light-blue darken-3\">\r\n            <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React, {useState} from 'react';\r\n\r\nconst useSelect = (stateInicial, opciones) => {\r\n\r\n    // state del custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const SelectNoticias =  () => (\r\n        <select\r\n            className=\"browser-default\"\r\n            value={state}\r\n            onChange={e => actualizarState(e.target.value)}\r\n        >\r\n            {opciones.map(opcion => (\r\n                <option key={opcion.value} value={opcion.value}>{opcion.label}</option>\r\n            ))}\r\n        </select>\r\n    );\r\n\r\n    return [state, SelectNoticias];\r\n}\r\n \r\nexport default useSelect;","import React from 'react';  \r\nimport styles from './Formulario.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport useSelect from '../hooks/useSelect';\r\n\r\nconst Formulario = ({guardarCategoria}) => {\r\n\r\n    const OPCIONES = [\r\n        { value: 'general', label: 'General'},\r\n        { value: 'business', label: 'Negocios'},\r\n        { value: 'entertainment', label: 'Entretenimiento'},\r\n        { value: 'health', label: 'Salud'},\r\n        { value: 'science', label: 'Ciencia'},\r\n        { value: 'sports', label: 'Deportes'},\r\n        { value: 'technology', label: 'Tecnología'},\r\n    ]\r\n\r\n    // utilizar custom hook\r\n    const [ categoria, SelectNoticias ] = useSelect('general', OPCIONES);\r\n\r\n    // submit al form, pasar categoria a app.js\r\n    const buscarNoticias = e => {\r\n        e.preventDefault();\r\n\r\n        guardarCategoria(categoria);\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.buscador} row`}>\r\n            <div className=\"col s12 m8 offset-m2\">\r\n                <form\r\n                    onSubmit={buscarNoticias}\r\n                >\r\n                    <h2 className={styles.heading}>Encuentra Noticias por Categoría</h2>\r\n\r\n                    <SelectNoticias />\r\n\r\n                    <div className=\"input-field col s12\">\r\n                        <input \r\n                            type=\"submit\" \r\n                            className={`${styles['btn-block']}  btn-large amber darken-2`}\r\n                            value=\"Buscar\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarCategoria: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Noticia = ({noticia}) => {\r\n    // extraer los datos\r\n    const { urlToImage, url, title, description, source } = noticia;\r\n\r\n    const imagen = (urlToImage) ?\r\n        <div className=\"card-image\">\r\n            <img src={urlToImage} alt={title} />\r\n            <span className=\"card-title\">{source.name}</span>\r\n        </div>\r\n    : null;\r\n\r\n    return ( \r\n        <div className=\"col s12 m6 l4\">\r\n            <div className=\"card\">\r\n                {imagen}\r\n\r\n                <div className=\"card-content\">\r\n                    <h3>{title}</h3>\r\n                    <p>{description}</p>\r\n                </div>\r\n\r\n                <div className=\"card-action\">\r\n                    <a\r\n                        href={url}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"waves-effect waves-light btn\"\r\n                    >Ver Noticia Completa</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nNoticia.propTypes = {\r\n    noticia: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Noticia;","import React from 'react';\r\nimport Noticia from './Noticia';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ListadoNoticias = ({noticias}) =>  ( \r\n        <div className=\"row\">\r\n            {noticias.map(noticia => (\r\n                <Noticia \r\n                    key={noticia.url}\r\n                    noticia={noticia}\r\n                />\r\n            ))}\r\n        </div>\r\n);\r\n\r\nListadoNoticias.propTypes = {\r\n    noticias: PropTypes.array.isRequired\r\n}\r\n \r\nexport default ListadoNoticias;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport Formulario from './components/Formulario';\r\nimport ListadoNoticias from './components/ListadoNoticias';\r\n\r\nfunction App() {\r\n\r\n  // definir la categoria y noticias\r\n  const [categoria, guardarCategoria] = useState('');\r\n  const [noticias, guardarNoticias] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n      const url = `https://newsapi.org/v2/top-headlines?country=mx&category=${categoria}&apiKey=6c1c1dfcb4a943c7bf481bc628b80153`;\r\n\r\n      const respuesta = await fetch(url);\r\n      const noticias = await respuesta.json();\r\n\r\n      guardarNoticias(noticias.articles);\r\n    }\r\n    consultarAPI();\r\n  }, [categoria]);\r\n\r\n  return (\r\n    <Fragment>\r\n        <Header \r\n          titulo='Buscador de Noticias'\r\n        />\r\n\r\n        <div className=\"container white\">\r\n            <Formulario \r\n              guardarCategoria={guardarCategoria}\r\n            />\r\n\r\n            <ListadoNoticias \r\n              noticias={noticias}\r\n            />\r\n        </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Formulario_heading__2ntZH\",\"buscador\":\"Formulario_buscador__3leO-\",\"btn-block\":\"Formulario_btn-block__3r4du\"};"],"sourceRoot":""}